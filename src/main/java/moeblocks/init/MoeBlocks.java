package moeblocks.init;

import moeblocks.MoeMod;
import moeblocks.automata.state.enums.RibbonColor;
import moeblocks.automata.state.enums.TimeOfDay;
import moeblocks.block.*;
import moeblocks.block.tree.PinkSakuraTree;
import moeblocks.block.tree.WhiteSakuraTree;
import moeblocks.block.tree.WisteriaTree;
import net.minecraft.block.*;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialColor;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.renderer.RenderTypeLookup;
import net.minecraft.potion.Effects;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;

import java.awt.print.Paper;
import java.util.function.Supplier;

public class MoeBlocks {
    public static final Supplier<AbstractBlock.Properties> SOLID_PROPERTY =    () -> AbstractBlock.Properties.create(Material.WOOD, MaterialColor.WOOD).sound(SoundType.WOOD).hardnessAndResistance(3.0F);
    public static final Supplier<AbstractBlock.Properties> SHOJI_PROPERTY =    () -> AbstractBlock.Properties.create(Material.WOOD, MaterialColor.PINK).sound(SoundType.CROP).hardnessAndResistance(0.5F).notSolid();
    public static final Supplier<AbstractBlock.Properties> PLANT_PROPERTY =    () -> AbstractBlock.Properties.create(Material.PLANTS).sound(SoundType.CROP).hardnessAndResistance(0.2F).tickRandomly().notSolid();
    public static final Supplier<AbstractBlock.Properties> NONSOLID_PROPERTY = () -> SOLID_PROPERTY.get().notSolid();
    public static final DeferredRegister<Block> REGISTRY = DeferredRegister.create(ForgeRegistries.BLOCKS, MoeMod.ID);
    public static final RegistryObject<Block> BLACK_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("black_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK));
    public static final RegistryObject<Block> BLACK_BLANK_PAPER_LANTERN = REGISTRY.register("black_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK));
    public static final RegistryObject<Block> BLACK_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("black_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.DAWN));
    public static final RegistryObject<Block> BLACK_DAWN_PAPER_LANTERN = REGISTRY.register("black_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.DAWN));
    public static final RegistryObject<Block> BLACK_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("black_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.EVENING));
    public static final RegistryObject<Block> BLACK_EVENING_PAPER_LANTERN = REGISTRY.register("black_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.EVENING));
    public static final RegistryObject<Block> BLACK_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("black_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> BLACK_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("black_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> BLACK_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("black_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.MORNING));
    public static final RegistryObject<Block> BLACK_MORNING_PAPER_LANTERN = REGISTRY.register("black_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.MORNING));
    public static final RegistryObject<Block> BLACK_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("black_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> BLACK_NIGHT_PAPER_LANTERN = REGISTRY.register("black_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> BLACK_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("black_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.NOON));
    public static final RegistryObject<Block> BLACK_NOON_PAPER_LANTERN = REGISTRY.register("black_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLACK, TimeOfDay.NOON));
    public static final RegistryObject<Block> RED_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("red_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.RED));
    public static final RegistryObject<Block> RED_BLANK_PAPER_LANTERN = REGISTRY.register("red_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.RED));
    public static final RegistryObject<Block> RED_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("red_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.DAWN));
    public static final RegistryObject<Block> RED_DAWN_PAPER_LANTERN = REGISTRY.register("red_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.DAWN));
    public static final RegistryObject<Block> RED_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("red_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.EVENING));
    public static final RegistryObject<Block> RED_EVENING_PAPER_LANTERN = REGISTRY.register("red_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.EVENING));
    public static final RegistryObject<Block> RED_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("red_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> RED_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("red_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> RED_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("red_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.MORNING));
    public static final RegistryObject<Block> RED_MORNING_PAPER_LANTERN = REGISTRY.register("red_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.MORNING));
    public static final RegistryObject<Block> RED_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("red_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> RED_NIGHT_PAPER_LANTERN = REGISTRY.register("red_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> RED_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("red_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.NOON));
    public static final RegistryObject<Block> RED_NOON_PAPER_LANTERN = REGISTRY.register("red_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.RED, TimeOfDay.NOON));
    public static final RegistryObject<Block> GREEN_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("green_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN));
    public static final RegistryObject<Block> GREEN_BLANK_PAPER_LANTERN = REGISTRY.register("green_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN));
    public static final RegistryObject<Block> GREEN_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("green_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.DAWN));
    public static final RegistryObject<Block> GREEN_DAWN_PAPER_LANTERN = REGISTRY.register("green_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.DAWN));
    public static final RegistryObject<Block> GREEN_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("green_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.EVENING));
    public static final RegistryObject<Block> GREEN_EVENING_PAPER_LANTERN = REGISTRY.register("green_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.EVENING));
    public static final RegistryObject<Block> GREEN_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("green_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> GREEN_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("green_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> GREEN_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("green_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.MORNING));
    public static final RegistryObject<Block> GREEN_MORNING_PAPER_LANTERN = REGISTRY.register("green_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.MORNING));
    public static final RegistryObject<Block> GREEN_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("green_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> GREEN_NIGHT_PAPER_LANTERN = REGISTRY.register("green_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> GREEN_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("green_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.NOON));
    public static final RegistryObject<Block> GREEN_NOON_PAPER_LANTERN = REGISTRY.register("green_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GREEN, TimeOfDay.NOON));
    public static final RegistryObject<Block> BROWN_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("brown_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN));
    public static final RegistryObject<Block> BROWN_BLANK_PAPER_LANTERN = REGISTRY.register("brown_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN));
    public static final RegistryObject<Block> BROWN_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("brown_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.DAWN));
    public static final RegistryObject<Block> BROWN_DAWN_PAPER_LANTERN = REGISTRY.register("brown_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.DAWN));
    public static final RegistryObject<Block> BROWN_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("brown_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.EVENING));
    public static final RegistryObject<Block> BROWN_EVENING_PAPER_LANTERN = REGISTRY.register("brown_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.EVENING));
    public static final RegistryObject<Block> BROWN_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("brown_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> BROWN_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("brown_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> BROWN_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("brown_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.MORNING));
    public static final RegistryObject<Block> BROWN_MORNING_PAPER_LANTERN = REGISTRY.register("brown_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.MORNING));
    public static final RegistryObject<Block> BROWN_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("brown_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> BROWN_NIGHT_PAPER_LANTERN = REGISTRY.register("brown_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> BROWN_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("brown_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.NOON));
    public static final RegistryObject<Block> BROWN_NOON_PAPER_LANTERN = REGISTRY.register("brown_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BROWN, TimeOfDay.NOON));
    public static final RegistryObject<Block> BLUE_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("blue_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE));
    public static final RegistryObject<Block> BLUE_BLANK_PAPER_LANTERN = REGISTRY.register("blue_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE));
    public static final RegistryObject<Block> BLUE_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("blue_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> BLUE_DAWN_PAPER_LANTERN = REGISTRY.register("blue_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> BLUE_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("blue_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> BLUE_EVENING_PAPER_LANTERN = REGISTRY.register("blue_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> BLUE_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("blue_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> BLUE_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("blue_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> BLUE_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("blue_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> BLUE_MORNING_PAPER_LANTERN = REGISTRY.register("blue_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> BLUE_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("blue_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> BLUE_NIGHT_PAPER_LANTERN = REGISTRY.register("blue_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> BLUE_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("blue_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.NOON));
    public static final RegistryObject<Block> BLUE_NOON_PAPER_LANTERN = REGISTRY.register("blue_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.BLUE, TimeOfDay.NOON));
    public static final RegistryObject<Block> PURPLE_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("purple_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE));
    public static final RegistryObject<Block> PURPLE_BLANK_PAPER_LANTERN = REGISTRY.register("purple_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE));
    public static final RegistryObject<Block> PURPLE_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("purple_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> PURPLE_DAWN_PAPER_LANTERN = REGISTRY.register("purple_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> PURPLE_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("purple_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> PURPLE_EVENING_PAPER_LANTERN = REGISTRY.register("purple_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> PURPLE_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("purple_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> PURPLE_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("purple_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> PURPLE_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("purple_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> PURPLE_MORNING_PAPER_LANTERN = REGISTRY.register("purple_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> PURPLE_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("purple_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> PURPLE_NIGHT_PAPER_LANTERN = REGISTRY.register("purple_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> PURPLE_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("purple_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.NOON));
    public static final RegistryObject<Block> PURPLE_NOON_PAPER_LANTERN = REGISTRY.register("purple_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PURPLE, TimeOfDay.NOON));
    public static final RegistryObject<Block> CYAN_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("cyan_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN));
    public static final RegistryObject<Block> CYAN_BLANK_PAPER_LANTERN = REGISTRY.register("cyan_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN));
    public static final RegistryObject<Block> CYAN_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("cyan_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.DAWN));
    public static final RegistryObject<Block> CYAN_DAWN_PAPER_LANTERN = REGISTRY.register("cyan_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.DAWN));
    public static final RegistryObject<Block> CYAN_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("cyan_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.EVENING));
    public static final RegistryObject<Block> CYAN_EVENING_PAPER_LANTERN = REGISTRY.register("cyan_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.EVENING));
    public static final RegistryObject<Block> CYAN_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("cyan_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> CYAN_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("cyan_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> CYAN_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("cyan_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.MORNING));
    public static final RegistryObject<Block> CYAN_MORNING_PAPER_LANTERN = REGISTRY.register("cyan_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.MORNING));
    public static final RegistryObject<Block> CYAN_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("cyan_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> CYAN_NIGHT_PAPER_LANTERN = REGISTRY.register("cyan_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> CYAN_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("cyan_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.NOON));
    public static final RegistryObject<Block> CYAN_NOON_PAPER_LANTERN = REGISTRY.register("cyan_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.CYAN, TimeOfDay.NOON));
    public static final RegistryObject<Block> LIGHT_GRAY_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("light_gray_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY));
    public static final RegistryObject<Block> LIGHT_GRAY_BLANK_PAPER_LANTERN = REGISTRY.register("light_gray_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY));
    public static final RegistryObject<Block> LIGHT_GRAY_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("light_gray_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.DAWN));
    public static final RegistryObject<Block> LIGHT_GRAY_DAWN_PAPER_LANTERN = REGISTRY.register("light_gray_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.DAWN));
    public static final RegistryObject<Block> LIGHT_GRAY_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("light_gray_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.EVENING));
    public static final RegistryObject<Block> LIGHT_GRAY_EVENING_PAPER_LANTERN = REGISTRY.register("light_gray_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.EVENING));
    public static final RegistryObject<Block> LIGHT_GRAY_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("light_gray_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> LIGHT_GRAY_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("light_gray_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> LIGHT_GRAY_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("light_gray_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.MORNING));
    public static final RegistryObject<Block> LIGHT_GRAY_MORNING_PAPER_LANTERN = REGISTRY.register("light_gray_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.MORNING));
    public static final RegistryObject<Block> LIGHT_GRAY_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("light_gray_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> LIGHT_GRAY_NIGHT_PAPER_LANTERN = REGISTRY.register("light_gray_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> LIGHT_GRAY_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("light_gray_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.NOON));
    public static final RegistryObject<Block> LIGHT_GRAY_NOON_PAPER_LANTERN = REGISTRY.register("light_gray_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_GRAY, TimeOfDay.NOON));
    public static final RegistryObject<Block> GRAY_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("gray_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY));
    public static final RegistryObject<Block> GRAY_BLANK_PAPER_LANTERN = REGISTRY.register("gray_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY));
    public static final RegistryObject<Block> GRAY_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("gray_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.DAWN));
    public static final RegistryObject<Block> GRAY_DAWN_PAPER_LANTERN = REGISTRY.register("gray_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.DAWN));
    public static final RegistryObject<Block> GRAY_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("gray_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.EVENING));
    public static final RegistryObject<Block> GRAY_EVENING_PAPER_LANTERN = REGISTRY.register("gray_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.EVENING));
    public static final RegistryObject<Block> GRAY_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("gray_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> GRAY_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("gray_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> GRAY_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("gray_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.MORNING));
    public static final RegistryObject<Block> GRAY_MORNING_PAPER_LANTERN = REGISTRY.register("gray_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.MORNING));
    public static final RegistryObject<Block> GRAY_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("gray_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> GRAY_NIGHT_PAPER_LANTERN = REGISTRY.register("gray_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> GRAY_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("gray_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.NOON));
    public static final RegistryObject<Block> GRAY_NOON_PAPER_LANTERN = REGISTRY.register("gray_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.GRAY, TimeOfDay.NOON));
    public static final RegistryObject<Block> PINK_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("pink_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK));
    public static final RegistryObject<Block> PINK_BLANK_PAPER_LANTERN = REGISTRY.register("pink_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK));
    public static final RegistryObject<Block> PINK_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("pink_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.DAWN));
    public static final RegistryObject<Block> PINK_DAWN_PAPER_LANTERN = REGISTRY.register("pink_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.DAWN));
    public static final RegistryObject<Block> PINK_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("pink_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.EVENING));
    public static final RegistryObject<Block> PINK_EVENING_PAPER_LANTERN = REGISTRY.register("pink_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.EVENING));
    public static final RegistryObject<Block> PINK_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("pink_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> PINK_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("pink_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> PINK_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("pink_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.MORNING));
    public static final RegistryObject<Block> PINK_MORNING_PAPER_LANTERN = REGISTRY.register("pink_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.MORNING));
    public static final RegistryObject<Block> PINK_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("pink_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> PINK_NIGHT_PAPER_LANTERN = REGISTRY.register("pink_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> PINK_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("pink_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.NOON));
    public static final RegistryObject<Block> PINK_NOON_PAPER_LANTERN = REGISTRY.register("pink_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.PINK, TimeOfDay.NOON));
    public static final RegistryObject<Block> LIME_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("lime_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME));
    public static final RegistryObject<Block> LIME_BLANK_PAPER_LANTERN = REGISTRY.register("lime_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME));
    public static final RegistryObject<Block> LIME_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("lime_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.DAWN));
    public static final RegistryObject<Block> LIME_DAWN_PAPER_LANTERN = REGISTRY.register("lime_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.DAWN));
    public static final RegistryObject<Block> LIME_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("lime_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.EVENING));
    public static final RegistryObject<Block> LIME_EVENING_PAPER_LANTERN = REGISTRY.register("lime_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.EVENING));
    public static final RegistryObject<Block> LIME_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("lime_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> LIME_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("lime_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> LIME_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("lime_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.MORNING));
    public static final RegistryObject<Block> LIME_MORNING_PAPER_LANTERN = REGISTRY.register("lime_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.MORNING));
    public static final RegistryObject<Block> LIME_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("lime_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> LIME_NIGHT_PAPER_LANTERN = REGISTRY.register("lime_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> LIME_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("lime_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.NOON));
    public static final RegistryObject<Block> LIME_NOON_PAPER_LANTERN = REGISTRY.register("lime_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIME, TimeOfDay.NOON));
    public static final RegistryObject<Block> YELLOW_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("yellow_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW));
    public static final RegistryObject<Block> YELLOW_BLANK_PAPER_LANTERN = REGISTRY.register("yellow_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW));
    public static final RegistryObject<Block> YELLOW_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("yellow_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.DAWN));
    public static final RegistryObject<Block> YELLOW_DAWN_PAPER_LANTERN = REGISTRY.register("yellow_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.DAWN));
    public static final RegistryObject<Block> YELLOW_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("yellow_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.EVENING));
    public static final RegistryObject<Block> YELLOW_EVENING_PAPER_LANTERN = REGISTRY.register("yellow_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.EVENING));
    public static final RegistryObject<Block> YELLOW_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("yellow_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> YELLOW_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("yellow_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> YELLOW_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("yellow_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.MORNING));
    public static final RegistryObject<Block> YELLOW_MORNING_PAPER_LANTERN = REGISTRY.register("yellow_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.MORNING));
    public static final RegistryObject<Block> YELLOW_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("yellow_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> YELLOW_NIGHT_PAPER_LANTERN = REGISTRY.register("yellow_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> YELLOW_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("yellow_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.NOON));
    public static final RegistryObject<Block> YELLOW_NOON_PAPER_LANTERN = REGISTRY.register("yellow_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.YELLOW, TimeOfDay.NOON));
    public static final RegistryObject<Block> LIGHT_BLUE_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("light_blue_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE));
    public static final RegistryObject<Block> LIGHT_BLUE_BLANK_PAPER_LANTERN = REGISTRY.register("light_blue_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE));
    public static final RegistryObject<Block> LIGHT_BLUE_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("light_blue_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> LIGHT_BLUE_DAWN_PAPER_LANTERN = REGISTRY.register("light_blue_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> LIGHT_BLUE_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("light_blue_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> LIGHT_BLUE_EVENING_PAPER_LANTERN = REGISTRY.register("light_blue_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> LIGHT_BLUE_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("light_blue_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> LIGHT_BLUE_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("light_blue_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> LIGHT_BLUE_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("light_blue_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> LIGHT_BLUE_MORNING_PAPER_LANTERN = REGISTRY.register("light_blue_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> LIGHT_BLUE_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("light_blue_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> LIGHT_BLUE_NIGHT_PAPER_LANTERN = REGISTRY.register("light_blue_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> LIGHT_BLUE_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("light_blue_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.NOON));
    public static final RegistryObject<Block> LIGHT_BLUE_NOON_PAPER_LANTERN = REGISTRY.register("light_blue_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.LIGHT_BLUE, TimeOfDay.NOON));
    public static final RegistryObject<Block> MAGENTA_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("magenta_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA));
    public static final RegistryObject<Block> MAGENTA_BLANK_PAPER_LANTERN = REGISTRY.register("magenta_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA));
    public static final RegistryObject<Block> MAGENTA_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("magenta_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.DAWN));
    public static final RegistryObject<Block> MAGENTA_DAWN_PAPER_LANTERN = REGISTRY.register("magenta_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.DAWN));
    public static final RegistryObject<Block> MAGENTA_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("magenta_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.EVENING));
    public static final RegistryObject<Block> MAGENTA_EVENING_PAPER_LANTERN = REGISTRY.register("magenta_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.EVENING));
    public static final RegistryObject<Block> MAGENTA_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("magenta_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> MAGENTA_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("magenta_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> MAGENTA_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("magenta_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.MORNING));
    public static final RegistryObject<Block> MAGENTA_MORNING_PAPER_LANTERN = REGISTRY.register("magenta_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.MORNING));
    public static final RegistryObject<Block> MAGENTA_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("magenta_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> MAGENTA_NIGHT_PAPER_LANTERN = REGISTRY.register("magenta_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> MAGENTA_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("magenta_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.NOON));
    public static final RegistryObject<Block> MAGENTA_NOON_PAPER_LANTERN = REGISTRY.register("magenta_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.MAGENTA, TimeOfDay.NOON));
    public static final RegistryObject<Block> ORANGE_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("orange_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE));
    public static final RegistryObject<Block> ORANGE_BLANK_PAPER_LANTERN = REGISTRY.register("orange_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE));
    public static final RegistryObject<Block> ORANGE_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("orange_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> ORANGE_DAWN_PAPER_LANTERN = REGISTRY.register("orange_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> ORANGE_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("orange_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> ORANGE_EVENING_PAPER_LANTERN = REGISTRY.register("orange_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> ORANGE_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("orange_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> ORANGE_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("orange_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> ORANGE_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("orange_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> ORANGE_MORNING_PAPER_LANTERN = REGISTRY.register("orange_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> ORANGE_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("orange_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> ORANGE_NIGHT_PAPER_LANTERN = REGISTRY.register("orange_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> ORANGE_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("orange_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.NOON));
    public static final RegistryObject<Block> ORANGE_NOON_PAPER_LANTERN = REGISTRY.register("orange_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.ORANGE, TimeOfDay.NOON));
    public static final RegistryObject<Block> WHITE_BLANK_CALLIGRAPHY_SCROLL = REGISTRY.register("white_blank_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE));
    public static final RegistryObject<Block> WHITE_BLANK_PAPER_LANTERN = REGISTRY.register("white_blank_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE));
    public static final RegistryObject<Block> WHITE_DAWN_CALLIGRAPHY_SCROLL = REGISTRY.register("white_dawn_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> WHITE_DAWN_PAPER_LANTERN = REGISTRY.register("white_dawn_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.DAWN));
    public static final RegistryObject<Block> WHITE_EVENING_CALLIGRAPHY_SCROLL = REGISTRY.register("white_evening_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> WHITE_EVENING_PAPER_LANTERN = REGISTRY.register("white_evening_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.EVENING));
    public static final RegistryObject<Block> WHITE_MIDNIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("white_midnight_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> WHITE_MIDNIGHT_PAPER_LANTERN = REGISTRY.register("white_midnight_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.MIDNIGHT));
    public static final RegistryObject<Block> WHITE_MORNING_CALLIGRAPHY_SCROLL = REGISTRY.register("white_morning_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> WHITE_MORNING_PAPER_LANTERN = REGISTRY.register("white_morning_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.MORNING));
    public static final RegistryObject<Block> WHITE_NIGHT_CALLIGRAPHY_SCROLL = REGISTRY.register("white_night_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> WHITE_NIGHT_PAPER_LANTERN = REGISTRY.register("white_night_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.NIGHT));
    public static final RegistryObject<Block> WHITE_NOON_CALLIGRAPHY_SCROLL = REGISTRY.register("white_noon_calligraphy_scroll", () -> new CalligraphyScrollBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.NOON));
    public static final RegistryObject<Block> WHITE_NOON_PAPER_LANTERN = REGISTRY.register("white_noon_paper_lantern", () -> new PaperLanternBlock(SHOJI_PROPERTY.get(), RibbonColor.WHITE, TimeOfDay.NOON));
    public static final RegistryObject<Block> CALLIGRAPHY_TABLE = REGISTRY.register("calligraphy_table", () -> new CalligraphyTableBlock(SOLID_PROPERTY.get()));
    public static final RegistryObject<Block> PINK_SAKURA_BLOSSOMS = REGISTRY.register("pink_sakura_blossoms", () -> new SakuraBlossomsBlock(MoeParticles.PINK_SAKURA_PETAL, PLANT_PROPERTY.get()));
    public static final RegistryObject<Block> PINK_SAKURA_SAPLING = REGISTRY.register("pink_sakura_sapling", () -> new SaplingBlock(new PinkSakuraTree(), PLANT_PROPERTY.get()));
    public static final RegistryObject<Block> WHITE_SAKURA_BLOSSOMS = REGISTRY.register("white_sakura_blossoms", () -> new SakuraBlossomsBlock(MoeParticles.WHITE_SAKURA_PETAL, PLANT_PROPERTY.get()));
    public static final RegistryObject<Block> WHITE_SAKURA_SAPLING = REGISTRY.register("white_sakura_sapling", () -> new SaplingBlock(new WhiteSakuraTree(), PLANT_PROPERTY.get()));
    public static final RegistryObject<Block> WISTERIA_SAPLING = REGISTRY.register("wisteria_sapling", () -> new SaplingBlock(new WisteriaTree(), PLANT_PROPERTY.get()));
    public static final RegistryObject<Block> BLUE_SPIDER_LILY = REGISTRY.register("blue_spider_lily", () -> new MoeFlowerBlock(PLANT_PROPERTY.get(), Effects.BAD_OMEN));
    public static final RegistryObject<Block> RED_SPIDER_LILY = REGISTRY.register("red_spider_lily", () -> new MoeFlowerBlock(PLANT_PROPERTY.get(), Effects.HERO_OF_THE_VILLAGE));
    public static final RegistryObject<Block> POTTED_BLUE_SPIDER_LILY = REGISTRY.register("potted_blue_spider_lily", () -> new FlowerPotBlock(MoeBlocks::getFlowerPot, BLUE_SPIDER_LILY, AbstractBlock.Properties.from(MoeBlocks.getFlowerPot())));
    public static final RegistryObject<Block> POTTED_PINK_SAKURA_SAPLING = REGISTRY.register("potted_pink_sakura_sapling", () -> new FlowerPotBlock(MoeBlocks::getFlowerPot, PINK_SAKURA_SAPLING, AbstractBlock.Properties.from(MoeBlocks.getFlowerPot())));
    public static final RegistryObject<Block> POTTED_RED_SPIDER_LILY = REGISTRY.register("potted_red_spider_lily", () -> new FlowerPotBlock(MoeBlocks::getFlowerPot, RED_SPIDER_LILY, AbstractBlock.Properties.from(MoeBlocks.getFlowerPot())));
    public static final RegistryObject<Block> POTTED_WHITE_SAKURA_SAPLING = REGISTRY.register("potted_white_sakura_sapling", () -> new FlowerPotBlock(MoeBlocks::getFlowerPot, WHITE_SAKURA_SAPLING, AbstractBlock.Properties.from(MoeBlocks.getFlowerPot())));
    public static final RegistryObject<Block> POTTED_WISTERIA_SAPLING = REGISTRY.register("potted_wisteria_sapling", () -> new FlowerPotBlock(MoeBlocks::getFlowerPot, WISTERIA_SAPLING, AbstractBlock.Properties.from(MoeBlocks.getFlowerPot())));
    public static final RegistryObject<Block> SAKURA_BUTTON = REGISTRY.register("sakura_button", () -> new WoodButtonBlock(NONSOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SAKURA_FENCE = REGISTRY.register("sakura_fence", () -> new FenceBlock(NONSOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SAKURA_FENCE_GATE = REGISTRY.register("sakura_fence_gate", () -> new FenceGateBlock(NONSOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SAKURA_LOG = REGISTRY.register("sakura_log", () -> new RotatedPillarBlock(SOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SAKURA_PLANKS = REGISTRY.register("sakura_planks", () -> new Block(SOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SAKURA_PRESSURE_PLATE = REGISTRY.register("sakura_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, NONSOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SAKURA_SLAB = REGISTRY.register("sakura_slab", () -> new SlabBlock(NONSOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SAKURA_STAIRS = REGISTRY.register("sakura_stairs", () -> new StairsBlock(() -> SAKURA_PLANKS.get().getDefaultState(), NONSOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SAKURA_WOOD = REGISTRY.register("sakura_wood", () -> new RotatedPillarBlock(SOLID_PROPERTY.get()));
    public static final RegistryObject<Block> SHOJI_BLOCK = REGISTRY.register("shoji_block", () -> new Block(SHOJI_PROPERTY.get()));
    public static final RegistryObject<Block> SHOJI_LANTERN = REGISTRY.register("shoji_lantern", () -> new ShojiLanternBlock(SHOJI_PROPERTY.get()));
    public static final RegistryObject<Block> SHOJI_PANEL = REGISTRY.register("shoji_panel", () -> new TrapDoorBlock(SHOJI_PROPERTY.get()));
    public static final RegistryObject<Block> SHOJI_SCREEN = REGISTRY.register("shoji_screen", () -> new ShojiScreenBlock(SHOJI_PROPERTY.get()));
    public static final RegistryObject<Block> STRIPPED_SAKURA_LOG = REGISTRY.register("stripped_sakura_log", () -> new RotatedPillarBlock(SOLID_PROPERTY.get()));
    public static final RegistryObject<Block> STRIPPED_SAKURA_WOOD = REGISTRY.register("stripped_sakura_wood", () -> new RotatedPillarBlock(SOLID_PROPERTY.get()));
    public static final RegistryObject<Block> TATAMI_MAT = REGISTRY.register("tatami_mat", () -> new RotatedPillarBlock(SOLID_PROPERTY.get()));
    public static final RegistryObject<Block> WISTERIA_LEAVES = REGISTRY.register("wisteria_leaves", () -> new WisteriaLeavesBlock(PLANT_PROPERTY.get()));
    public static final RegistryObject<Block> WISTERIA_BINE = REGISTRY.register("wisteria_bine", () -> new RotatedPillarBlock(NONSOLID_PROPERTY.get()));
    public static final RegistryObject<Block> WISTERIA_VINE_BODY = REGISTRY.register("wisteria_vine_body", () -> new WisteriaVineBodyBlock(PLANT_PROPERTY.get()));
    public static final RegistryObject<Block> WISTERIA_VINE_TIP = REGISTRY.register("wisteria_vine_tip", () -> new WisteriaVineTipBlock(PLANT_PROPERTY.get()));

    public static void registerPottedPlants() {
        getFlowerPot().addPlant(BLUE_SPIDER_LILY.get().getRegistryName(), POTTED_BLUE_SPIDER_LILY);
        getFlowerPot().addPlant(PINK_SAKURA_SAPLING.get().getRegistryName(), POTTED_PINK_SAKURA_SAPLING);
        getFlowerPot().addPlant(RED_SPIDER_LILY.get().getRegistryName(), POTTED_RED_SPIDER_LILY);
        getFlowerPot().addPlant(WHITE_SAKURA_SAPLING.get().getRegistryName(), POTTED_WHITE_SAKURA_SAPLING);
        getFlowerPot().addPlant(WISTERIA_SAPLING.get().getRegistryName(), POTTED_WISTERIA_SAPLING);
    }

    public static void registerRenderTypes() {
        RenderTypeLookup.setRenderLayer(BLACK_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLACK_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BLUE_SPIDER_LILY.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(BROWN_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(CYAN_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GRAY_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(GREEN_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_BLUE_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIGHT_GRAY_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(LIME_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(MAGENTA_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(ORANGE_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PINK_SAKURA_BLOSSOMS.get(), RenderType.getCutoutMipped());
        RenderTypeLookup.setRenderLayer(PINK_SAKURA_SAPLING.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(POTTED_BLUE_SPIDER_LILY.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(POTTED_PINK_SAKURA_SAPLING.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(POTTED_RED_SPIDER_LILY.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(POTTED_WHITE_SAKURA_SAPLING.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(POTTED_WISTERIA_SAPLING.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(PURPLE_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(RED_SPIDER_LILY.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(SHOJI_PANEL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(SHOJI_SCREEN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WHITE_SAKURA_BLOSSOMS.get(), RenderType.getCutoutMipped());
        RenderTypeLookup.setRenderLayer(WHITE_SAKURA_SAPLING.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WISTERIA_LEAVES.get(), RenderType.getCutoutMipped());
        RenderTypeLookup.setRenderLayer(WISTERIA_SAPLING.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WISTERIA_VINE_BODY.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(WISTERIA_VINE_TIP.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_BLANK_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_BLANK_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_DAWN_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_DAWN_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_EVENING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_EVENING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_MIDNIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_MIDNIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_MORNING_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_MORNING_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_NIGHT_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_NIGHT_PAPER_LANTERN.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_NOON_CALLIGRAPHY_SCROLL.get(), RenderType.getCutout());
        RenderTypeLookup.setRenderLayer(YELLOW_NOON_PAPER_LANTERN.get(), RenderType.getCutout());
    }

    private static FlowerPotBlock getFlowerPot() {
        return (FlowerPotBlock) Blocks.FLOWER_POT;
    }
}
