package moe.blocks.mod.data.conversation;

import moe.blocks.mod.entity.AbstractNPCEntity;
import net.minecraft.entity.player.PlayerEntity;

import java.util.function.BiPredicate;

public enum Conditions {
    ALWAYS((character, player) -> { return true; }),
    MALE((character, player) -> { return true; }),
    FEMALE((character, player) -> { return true; }),
    NEKO((character, player) -> { return true; }),
    HIMEDERE((character, player) -> { return true; }),
    KUUDERE((character, player) -> { return true; }),
    TSUNDERE((character, player) -> { return true; }),
    YANDERE((character, player) -> { return true; }),
    DEREDERE((character, player) -> { return true; }),
    DANDERE((character, player) -> { return true; }),
    NOT_HIMEDERE((character, player) -> { return true; }),
    NOT_KUUDERE((character, player) -> { return true; }),
    NOT_TSUNDERE((character, player) -> { return true; }),
    NOT_YANDERE((character, player) -> { return true; }),
    NOT_DEREDERE((character, player) -> { return true; }),
    NOT_DANDERE((character, player) -> { return true; }),
    BLOOD_TYPE_O((character, player) -> { return true; }),
    BLOOD_TYPE_A((character, player) -> { return true; }),
    BLOOD_TYPE_B((character, player) -> { return true; }),
    BLOOD_TYPE_AB((character, player) -> { return true; }),
    NOT_BLOOD_TYPE_O((character, player) -> { return true; }),
    NOT_BLOOD_TYPE_A((character, player) -> { return true; }),
    NOT_BLOOD_TYPE_B((character, player) -> { return true; }),
    NOT_BLOOD_TYPE_AB((character, player) -> { return true; }),
    ANGRY((character, player) -> { return true; }),
    BEGGING((character, player) -> { return true; }),
    CONFUSED((character, player) -> { return true; }),
    CRYING((character, player) -> { return true; }),
    MISCHIEVOUS((character, player) -> { return true; }),
    EMBARASSED((character, player) -> { return true; }),
    HAPPY((character, player) -> { return true; }),
    NORMAL((character, player) -> { return true; }),
    PAINED((character, player) -> { return true; }),
    PSYCHOTIC((character, player) -> { return true; }),
    SCARED((character, player) -> { return true; }),
    SNOOTY((character, player) -> { return true; }),
    SMITTEN((character, player) -> { return true; }),
    TIRED((character, player) -> { return true; }),
    NOT_ANGRY((character, player) -> { return true; }),
    NOT_BEGGING((character, player) -> { return true; }),
    NOT_CONFUSED((character, player) -> { return true; }),
    NOT_CRYING((character, player) -> { return true; }),
    NOT_MISCHIEVOUS((character, player) -> { return true; }),
    NOT_EMBARASSED((character, player) -> { return true; }),
    NOT_HAPPY((character, player) -> { return true; }),
    NOT_NORMAL((character, player) -> { return true; }),
    NOT_PAINED((character, player) -> { return true; }),
    NOT_PSYCHOTIC((character, player) -> { return true; }),
    NOT_SCARED((character, player) -> { return true; }),
    NOT_SNOOTY((character, player) -> { return true; }),
    NOT_SMITTEN((character, player) -> { return true; }),
    NOT_TIRED((character, player) -> { return true; }),
    DAYTIME((character, player) -> { return true; }),
    DAWN((character, player) -> { return true; }),
    MORNING((character, player) -> { return true; }),
    NOON((character, player) -> { return true; }),
    EVENING((character, player) -> { return true; }),
    DUSK((character, player) -> { return true; }),
    NIGHT((character, player) -> { return true; }),
    NOT_DAYTIME((character, player) -> { return true; }),
    NOT_DAWN((character, player) -> { return true; }),
    NOT_MORNING((character, player) -> { return true; }),
    NOT_NOON((character, player) -> { return true; }),
    NOT_EVENING((character, player) -> { return true; }),
    NOT_DUSK((character, player) -> { return true; }),
    NOT_NIGHT((character, player) -> { return true; }),
    NEW_MOON((character, player) -> { return true; }),
    WAXING_CRESCENT_MOON((character, player) -> { return true; }),
    WAXING_QUARTER_MOON((character, player) -> { return true; }),
    WAXING_GIBBOUS_MOON((character, player) -> { return true; }),
    FULL_MOON((character, player) -> { return true; }),
    WANING_GIBBOUS_MOON((character, player) -> { return true; }),
    WANING_QUARTER_MOON((character, player) -> { return true; }),
    WANING_CRESCENT_MOON((character, player) -> { return true; }),
    NOT_NEW_MOON((character, player) -> { return true; }),
    NOT_WAXING_CRESCENT_MOON((character, player) -> { return true; }),
    NOT_WAXING_QUARTER_MOON((character, player) -> { return true; }),
    NOT_WAXING_GIBBOUS_MOON((character, player) -> { return true; }),
    NOT_FULL_MOON((character, player) -> { return true; }),
    NOT_WANING_GIBBOUS_MOON((character, player) -> { return true; }),
    NOT_WANING_QUARTER_MOON((character, player) -> { return true; }),
    NOT_WANING_CRESCENT_MOON((character, player) -> { return true; }),
    CLEAR_WEATHER((character, player) -> { return true; }),
    RAINY_WEATHER((character, player) -> { return true; }),
    STORMY_WEATHER((character, player) -> { return true; }),
    SNOWY_WEATHER((character, player) -> { return true; }),
    NOT_CLEAR_WEATHER((character, player) -> { return true; }),
    NOT_RAINY_WEATHER((character, player) -> { return true; }),
    NOT_STORMY_WEATHER((character, player) -> { return true; }),
    NOT_SNOWY_WEATHER((character, player) -> { return true; }),
    ARID_CLIMATE((character, player) -> { return true; }),
    LUSH_CLIMATE((character, player) -> { return true; }),
    OCEAN_CLIMATE((character, player) -> { return true; }),
    MILD_CLIMATE((character, player) -> { return true; }),
    COLD_CLIMATE((character, player) -> { return true; }),
    NOT_ARID_CLIMATE((character, player) -> { return true; }),
    NOT_LUSH_CLIMATE((character, player) -> { return true; }),
    NOT_OCEAN_CLIMATE((character, player) -> { return true; }),
    NOT_MILD_CLIMATE((character, player) -> { return true; }),
    NOT_COLD_CLIMATE((character, player) -> { return true; }),
    LIGHT_LEVEL_0((character, player) -> { return true; }),
    LIGHT_LEVEL_1((character, player) -> { return true; }),
    LIGHT_LEVEL_2((character, player) -> { return true; }),
    LIGHT_LEVEL_3((character, player) -> { return true; }),
    LIGHT_LEVEL_4((character, player) -> { return true; }),
    LIGHT_LEVEL_5((character, player) -> { return true; }),
    LIGHT_LEVEL_6((character, player) -> { return true; }),
    LIGHT_LEVEL_7((character, player) -> { return true; }),
    LIGHT_LEVEL_8((character, player) -> { return true; }),
    LIGHT_LEVEL_9((character, player) -> { return true; }),
    LIGHT_LEVEL_10((character, player) -> { return true; }),
    LIGHT_LEVEL_11((character, player) -> { return true; }),
    LIGHT_LEVEL_12((character, player) -> { return true; }),
    LIGHT_LEVEL_13((character, player) -> { return true; }),
    LIGHT_LEVEL_14((character, player) -> { return true; }),
    LIGHT_LEVEL_15((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_0((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_1((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_2((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_3((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_4((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_5((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_6((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_7((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_8((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_9((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_10((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_11((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_12((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_13((character, player) -> { return true; }),
    LIGHT_LEVEL_GREATER_THAN_14((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_1((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_2((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_3((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_4((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_5((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_6((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_7((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_8((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_9((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_10((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_11((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_12((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_13((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_14((character, player) -> { return true; }),
    LIGHT_LEVEL_LESS_THAN_15((character, player) -> { return true; }),
    Y_ABOVE_0((character, player) -> { return true; }),
    Y_ABOVE_16((character, player) -> { return true; }),
    Y_ABOVE_64((character, player) -> { return true; }),
    Y_ABOVE_128((character, player) -> { return true; }),
    Y_ABOVE_256((character, player) -> { return true; }),
    Y_BELOW_0((character, player) -> { return true; }),
    Y_BELOW_16((character, player) -> { return true; }),
    Y_BELOW_64((character, player) -> { return true; }),
    Y_BELOW_128((character, player) -> { return true; }),
    Y_BELOW_256((character, player) -> { return true; }),
    IS_NETHER((character, player) -> { return true; }),
    IS_OVERWORLD((character, player) -> { return true; }),
    IS_END((character, player) -> { return true; }),
    IS_CHRISTMAS_SOON((character, player) -> { return true; }),
    IS_CHRISTMAS_TODAY((character, player) -> { return true; }),
    IS_NEW_YEARS_SOON((character, player) -> { return true; }),
    IS_NEW_YEARS_TODAY((character, player) -> { return true; }),
    IS_VALENTINES_DAY_SOON((character, player) -> { return true; }),
    IS_VALENTINES_DAY_TODAY((character, player) -> { return true; }),
    IS_WHITE_DAY_SOON((character, player) -> { return true; }),
    IS_WHITE_DAY_TODAY((character, player) -> { return true; }),
    IS_SUMMER_FESTIVAL_SOON((character, player) -> { return true; }),
    IS_SUMMER_FESTIVAL_TODAY((character, player) -> { return true; }),
    IS_PLAYER_HOLDING_EQUIP((character, player) -> { return true; }),
    IS_PLAYER_HOLDING_WORSE_EQUIP((character, player) -> { return true; }),
    IS_PLAYER_HOLDING_BETTER_EQUIP((character, player) -> { return true; }),
    IS_PLAYER_HOLDING_GIFT((character, player) -> { return true; }),
    IS_PLAYER_HOLDING_GOOD_GIFT((character, player) -> { return true; }),
    IS_PLAYER_HOLDING_BAD_GIFT((character, player) -> { return true; }),
    IS_PLAYER_HOLDING_FOOD((character, player) -> { return true; }),
    IS_OCCUPIED((character, player) -> { return true; }),
    IS_SLEEPING((character, player) -> { return true; }),
    IS_FOLLOWING((character, player) -> { return true; }),
    IS_FOLLOWING_YOU((character, player) -> { return true; }),
    IS_ATTACKING((character, player) -> { return true; }),
    IS_NOT_OCCUPIED((character, player) -> { return true; }),
    IS_NOT_SLEEPING((character, player) -> { return true; }),
    IS_NOT_FOLLOWING((character, player) -> { return true; }),
    IS_NOT_FOLLOWING_YOU((character, player) -> { return true; }),
    IS_NOT_ATTACKING((character, player) -> { return true; }),
    HEALTH_0((character, player) -> { return true; }),
    HEALTH_2((character, player) -> { return true; }),
    HEALTH_4((character, player) -> { return true; }),
    HEALTH_6((character, player) -> { return true; }),
    HEALTH_8((character, player) -> { return true; }),
    HEALTH_10((character, player) -> { return true; }),
    HEALTH_12((character, player) -> { return true; }),
    HEALTH_14((character, player) -> { return true; }),
    HEALTH_16((character, player) -> { return true; }),
    HEALTH_18((character, player) -> { return true; }),
    HEALTH_20((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_0((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_2((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_4((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_6((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_8((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_10((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_12((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_14((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_16((character, player) -> { return true; }),
    HEALTH_GREATER_THAN_18((character, player) -> { return true; }),
    HEALTH_LESS_THAN_2((character, player) -> { return true; }),
    HEALTH_LESS_THAN_4((character, player) -> { return true; }),
    HEALTH_LESS_THAN_6((character, player) -> { return true; }),
    HEALTH_LESS_THAN_8((character, player) -> { return true; }),
    HEALTH_LESS_THAN_10((character, player) -> { return true; }),
    HEALTH_LESS_THAN_12((character, player) -> { return true; }),
    HEALTH_LESS_THAN_14((character, player) -> { return true; }),
    HEALTH_LESS_THAN_16((character, player) -> { return true; }),
    HEALTH_LESS_THAN_18((character, player) -> { return true; }),
    HEALTH_LESS_THAN_20((character, player) -> { return true; }),
    HUNGER_0((character, player) -> { return true; }),
    HUNGER_2((character, player) -> { return true; }),
    HUNGER_4((character, player) -> { return true; }),
    HUNGER_6((character, player) -> { return true; }),
    HUNGER_8((character, player) -> { return true; }),
    HUNGER_10((character, player) -> { return true; }),
    HUNGER_12((character, player) -> { return true; }),
    HUNGER_14((character, player) -> { return true; }),
    HUNGER_16((character, player) -> { return true; }),
    HUNGER_18((character, player) -> { return true; }),
    HUNGER_20((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_0((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_2((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_4((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_6((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_8((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_10((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_12((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_14((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_16((character, player) -> { return true; }),
    HUNGER_GREATER_THAN_18((character, player) -> { return true; }),
    HUNGER_LESS_THAN_2((character, player) -> { return true; }),
    HUNGER_LESS_THAN_4((character, player) -> { return true; }),
    HUNGER_LESS_THAN_6((character, player) -> { return true; }),
    HUNGER_LESS_THAN_8((character, player) -> { return true; }),
    HUNGER_LESS_THAN_10((character, player) -> { return true; }),
    HUNGER_LESS_THAN_12((character, player) -> { return true; }),
    HUNGER_LESS_THAN_14((character, player) -> { return true; }),
    HUNGER_LESS_THAN_16((character, player) -> { return true; }),
    HUNGER_LESS_THAN_18((character, player) -> { return true; }),
    HUNGER_LESS_THAN_20((character, player) -> { return true; }),
    PLAYER_LAST_SEEN_1_DAY_AGO((character, player) -> { return true; }),
    PLAYER_LAST_SEEN_2_DAYS_AGO((character, player) -> { return true; }),
    PLAYER_LAST_SEEN_3_DAYS_AGO((character, player) -> { return true; }),
    PLAYER_LAST_SEEN_4_DAYS_AGO((character, player) -> { return true; }),
    PLAYER_LAST_SEEN_5_DAYS_AGO((character, player) -> { return true; }),
    PLAYER_LAST_SEEN_6_DAYS_AGO((character, player) -> { return true; }),
    PLAYER_LAST_SEEN_7_DAYS_AGO((character, player) -> { return true; }),
    PLAYER_LAST_SEEN_OVER_A_WEEK_AGO((character, player) -> { return true; }),
    PLAYER_HEALTH_0((character, player) -> { return true; }),
    PLAYER_HEALTH_2((character, player) -> { return true; }),
    PLAYER_HEALTH_4((character, player) -> { return true; }),
    PLAYER_HEALTH_6((character, player) -> { return true; }),
    PLAYER_HEALTH_8((character, player) -> { return true; }),
    PLAYER_HEALTH_10((character, player) -> { return true; }),
    PLAYER_HEALTH_12((character, player) -> { return true; }),
    PLAYER_HEALTH_14((character, player) -> { return true; }),
    PLAYER_HEALTH_16((character, player) -> { return true; }),
    PLAYER_HEALTH_18((character, player) -> { return true; }),
    PLAYER_HEALTH_20((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_0((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_2((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_4((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_6((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_8((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_10((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_12((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_14((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_16((character, player) -> { return true; }),
    PLAYER_HEALTH_GREATER_THAN_18((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_2((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_4((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_6((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_8((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_10((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_12((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_14((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_16((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_18((character, player) -> { return true; }),
    PLAYER_HEALTH_LESS_THAN_20((character, player) -> { return true; }),
    PLAYER_HUNGER_0((character, player) -> { return true; }),
    PLAYER_HUNGER_2((character, player) -> { return true; }),
    PLAYER_HUNGER_4((character, player) -> { return true; }),
    PLAYER_HUNGER_6((character, player) -> { return true; }),
    PLAYER_HUNGER_8((character, player) -> { return true; }),
    PLAYER_HUNGER_10((character, player) -> { return true; }),
    PLAYER_HUNGER_12((character, player) -> { return true; }),
    PLAYER_HUNGER_14((character, player) -> { return true; }),
    PLAYER_HUNGER_16((character, player) -> { return true; }),
    PLAYER_HUNGER_18((character, player) -> { return true; }),
    PLAYER_HUNGER_20((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_0((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_2((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_4((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_6((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_8((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_10((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_12((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_14((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_16((character, player) -> { return true; }),
    PLAYER_HUNGER_GREATER_THAN_18((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_2((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_4((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_6((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_8((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_10((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_12((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_14((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_16((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_18((character, player) -> { return true; }),
    PLAYER_HUNGER_LESS_THAN_20((character, player) -> { return true; }),
    LOVE_0((character, player) -> { return true; }),
    LOVE_2((character, player) -> { return true; }),
    LOVE_4((character, player) -> { return true; }),
    LOVE_6((character, player) -> { return true; }),
    LOVE_8((character, player) -> { return true; }),
    LOVE_10((character, player) -> { return true; }),
    LOVE_12((character, player) -> { return true; }),
    LOVE_14((character, player) -> { return true; }),
    LOVE_16((character, player) -> { return true; }),
    LOVE_18((character, player) -> { return true; }),
    LOVE_20((character, player) -> { return true; }),
    LOVE_GREATER_THAN_0((character, player) -> { return true; }),
    LOVE_GREATER_THAN_2((character, player) -> { return true; }),
    LOVE_GREATER_THAN_4((character, player) -> { return true; }),
    LOVE_GREATER_THAN_6((character, player) -> { return true; }),
    LOVE_GREATER_THAN_8((character, player) -> { return true; }),
    LOVE_GREATER_THAN_10((character, player) -> { return true; }),
    LOVE_GREATER_THAN_12((character, player) -> { return true; }),
    LOVE_GREATER_THAN_14((character, player) -> { return true; }),
    LOVE_GREATER_THAN_16((character, player) -> { return true; }),
    LOVE_GREATER_THAN_18((character, player) -> { return true; }),
    LOVE_LESS_THAN_0((character, player) -> { return true; }),
    LOVE_LESS_THAN_2((character, player) -> { return true; }),
    LOVE_LESS_THAN_4((character, player) -> { return true; }),
    LOVE_LESS_THAN_6((character, player) -> { return true; }),
    LOVE_LESS_THAN_8((character, player) -> { return true; }),
    LOVE_LESS_THAN_10((character, player) -> { return true; }),
    LOVE_LESS_THAN_12((character, player) -> { return true; }),
    LOVE_LESS_THAN_14((character, player) -> { return true; }),
    LOVE_LESS_THAN_16((character, player) -> { return true; }),
    LOVE_LESS_THAN_18((character, player) -> { return true; }),
    LOVE_LESS_THAN_20((character, player) -> { return true; }),
    ACT_1((character, player) -> { return true; }),
    ACT_2((character, player) -> { return true; }),
    ACT_3((character, player) -> { return true; }),
    ACT_4((character, player) -> { return true; }),
    ACT_GREATER_THAN_1((character, player) -> { return true; }),
    ACT_GREATER_THAN_2((character, player) -> { return true; }),
    ACT_GREATER_THAN_3((character, player) -> { return true; }),
    ACT_LESS_THAN_2((character, player) -> { return true; }),
    ACT_LESS_THAN_3((character, player) -> { return true; }),
    SCENE_1((character, player) -> { return true; }),
    SCENE_2((character, player) -> { return true; }),
    SCENE_3((character, player) -> { return true; }),
    SCENE_4((character, player) -> { return true; }),
    SCENE_5((character, player) -> { return true; }),
    SCENE_6((character, player) -> { return true; }),
    SCENE_7((character, player) -> { return true; }),
    SCENE_8((character, player) -> { return true; }),
    SCENE_9((character, player) -> { return true; }),
    SCENE_GREATER_THAN_1((character, player) -> { return true; }),
    SCENE_GREATER_THAN_2((character, player) -> { return true; }),
    SCENE_GREATER_THAN_3((character, player) -> { return true; }),
    SCENE_GREATER_THAN_4((character, player) -> { return true; }),
    SCENE_GREATER_THAN_5((character, player) -> { return true; }),
    SCENE_GREATER_THAN_6((character, player) -> { return true; }),
    SCENE_GREATER_THAN_7((character, player) -> { return true; }),
    SCENE_GREATER_THAN_8((character, player) -> { return true; }),
    SCENE_LESS_THAN_2((character, player) -> { return true; }),
    SCENE_LESS_THAN_3((character, player) -> { return true; }),
    SCENE_LESS_THAN_4((character, player) -> { return true; }),
    SCENE_LESS_THAN_5((character, player) -> { return true; }),
    SCENE_LESS_THAN_6((character, player) -> { return true; }),
    SCENE_LESS_THAN_7((character, player) -> { return true; }),
    SCENE_LESS_THAN_8((character, player) -> { return true; }),
    SCENE_LESS_THAN_9((character, player) -> { return true; });

    private final BiPredicate<AbstractNPCEntity, PlayerEntity> condition;

    Conditions(BiPredicate<AbstractNPCEntity, PlayerEntity> condition) {
        this.condition = condition;
    }

    public boolean test(AbstractNPCEntity character, PlayerEntity player) {
        return this.condition.test(character, player);
    }
}
